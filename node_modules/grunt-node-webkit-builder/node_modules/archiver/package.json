{
  "name": "archiver",
  "version": "0.5.2",
  "description": "Creates Archives (ZIP) via Node Streams.",
  "homepage": "https://github.com/ctalkington/node-archiver",
  "author": {
    "name": "Chris Talkington",
    "url": "http://christalkington.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ctalkington/node-archiver.git"
  },
  "bugs": {
    "url": "https://github.com/ctalkington/node-archiver/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ctalkington/node-archiver/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/archiver.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha --reporter dot",
    "bench": "node benchmark/simple/pack-zip.js"
  },
  "dependencies": {
    "readable-stream": "~1.0.24",
    "zip-stream": "~0.1.0",
    "lazystream": "~0.1.0",
    "file-utils": "~0.1.5",
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "mocha": "~1.16.0",
    "rimraf": "~2.2.0",
    "mkdirp": "~0.3.5",
    "stream-bench": "~0.1.2"
  },
  "keywords": [
    "archive",
    "archiver",
    "zip",
    "tar"
  ],
  "readme": "# Archiver v0.5.2 [![Build Status](https://secure.travis-ci.org/ctalkington/node-archiver.png?branch=master)](http://travis-ci.org/ctalkington/node-archiver)\r\n\r\nCreates Archives (Zip, Tar) via Node Streams.\r\n\r\n## Install\r\n\r\n```bash\r\nnpm install archiver --save\r\n```\r\n\r\nYou can also use `npm install https://github.com/ctalkington/node-archiver/archive/master.tar.gz` to test upcoming versions.\r\n\r\n## Archiver\r\n\r\n#### create(format, options)\r\n\r\nCreates an Archiver instance based on the format (zip, tar, etc) passed. Parameters can be passed directly to `Archiver` constructor for convenience.\r\n\r\n#### registerFormat(format, module)\r\n\r\nRegisters an archive format. Format modules are essentially transform streams with a few required methods. They will be further documented once a formal spec is in place.\r\n\r\n### Instance Methods\r\n\r\n#### append(input, data, callback(err))\r\n\r\nAppends an input source (text string, buffer, or stream) to the instance. When the instance has received, processed, and emitted the input, the callback is fired.\r\n\r\nReplaced `#addFile` in v0.5.\r\n\r\n```js\r\narchive.append('string', { name:'string.txt' });\r\narchive.append(new Buffer('string'), { name:'buffer.txt' });\r\narchive.append(fs.createReadStream('mydir/file.txt'), { name:'stream.txt' });\r\n```\r\n\r\n#### bulk(mappings)\r\n\r\nAppends multiple files from passed array of src-dest file mappings, based on [Grunt's \"Files Array\" format](http://gruntjs.com/configuring-tasks#files-array-format). A lazystream wrapper is used to prevent issues with open file limits.\r\n\r\n[Globbing patterns](http://gruntjs.com/configuring-tasks#globbing-patterns) and [multiple properties](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically) are supported through use of the [file-utils](https://github.com/SBoudrias/file-utils) package, based on Grunt's file utilities. Please note that multiple src files to single dest file (ie concat) is not supported.\r\n\r\nThe `data` property can be set (per src-dest mapping) to define file data for matched files.\r\n\r\n```js\r\narchive.bulk([\r\n  { src: ['mydir/**'], data: { date: new Date() } },\r\n  { expand: true, cwd: 'mydir', src: ['**'], dest: 'newdir' }\r\n]);\r\n```\r\n\r\n#### file(filepath, data, callback(err))\r\n\r\nAppends a file given its filepath. Uses a lazystream wrapper to prevent issues with open file limits.\r\n\r\n```js\r\narchive.file('mydir/file.txt', { name:'file.txt' });\r\n```\r\n\r\n#### finalize(callback(err, bytes))\r\n\r\nFinalizes the instance. When the instance's stream has finished emitting, the callback is fired. This generally doesn't correspond to the end of the destination stream; though a solution to track the destination stream may come in a future release.\r\n\r\n## Zip\r\n\r\n### Options\r\n\r\n#### comment `string`\r\n\r\nSets the zip comment.\r\n\r\n#### forceUTC `boolean`\r\n\r\nIf true, forces the file date and time to UTC. Helps with testing across timezones.\r\n\r\n#### zlib `object`\r\n\r\nPassed to node's [zlib](http://nodejs.org/api/zlib.html#zlib_options) module to control compression. Options may vary by node version.\r\n\r\n### File Data\r\n\r\n#### name `string` `required`\r\n\r\nSets the file name including internal path.\r\n\r\n#### date `string|Date`\r\n\r\nSets the file date. This can be any valid date string or instance. Defaults to current time in locale.\r\n\r\n#### store `boolean`\r\n\r\nIf true, file contents will be stored without compression.\r\n\r\n#### comment `string`\r\n\r\nSets the file comment.\r\n\r\n#### mode `number`\r\n\r\nSets the file permissions. (experimental)\r\n\r\n## Tar\r\n\r\n### Options\r\n\r\n#### recordSize `number`\r\n\r\nSets the size (in bytes) of each record in a block, default is 512 (for advanced users only).\r\n\r\n#### recordsPerBlock `number`\r\n\r\nSets the number of records in a block, default is 20 (for advanced users only).\r\n\r\n### File Data\r\n\r\n#### name `string` `required`\r\n\r\nSets the file name including internal path.\r\n\r\n#### date `string|Date`\r\n\r\nSets the file date. This can be any valid date string or instance. Defaults to current time in locale.\r\n\r\n#### mode `number`\r\n\r\nSets the file permissions. Defaults to 0664.\r\n\r\n## Things of Interest\r\n\r\n- [Examples](https://github.com/ctalkington/node-archiver/blob/master/examples)\r\n- [Changelog](https://github.com/ctalkington/node-archiver/releases)\r\n- [Archive Formats](https://github.com/ctalkington/node-archiver/blob/master/formats)\r\n- [Contributing](https://github.com/ctalkington/node-archiver/blob/master/CONTRIBUTING.md)\r\n- [MIT License](https://github.com/ctalkington/node-archiver/blob/master/LICENSE-MIT)\r\n\r\n## Credits\r\n\r\nConcept inspired by Antoine van Wel's [node-zipstream](https://github.com/wellawaretech/node-zipstream).\r\n\r\nTar inspired by isaacs's [node-tar](https://github.com/isaacs/node-tar).\r\n",
  "readmeFilename": "README.md",
  "_id": "archiver@0.5.2",
  "_from": "archiver@~0.5.2"
}
