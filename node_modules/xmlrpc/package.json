{
  "name": "xmlrpc",
  "description": "A pure JavaScript XML-RPC client and server.",
  "keywords": [
    "xml-rpc",
    "xmlrpc",
    "xml",
    "rpc"
  ],
  "version": "1.2.0",
  "preferGlobal": false,
  "homepage": "https://github.com/baalexander/node-xmlrpc",
  "author": {
    "name": "Brandon Alexander",
    "email": "baalexander@gmail.com",
    "url": "https://github.com/baalexander"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/baalexander/node-xmlrpc.git"
  },
  "bugs": {
    "url": "https://github.com/baalexander/node-xmlrpc/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/xmlrpc.js",
  "dependencies": {
    "sax": "0.4.x",
    "xmlbuilder": "0.4.2"
  },
  "devDependencies": {
    "vows": "0.7.x"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.8",
    "npm": ">=1.0.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/baalexander/node-xmlrpc/raw/master/LICENSE"
    }
  ],
  "readme": "## The What\n\nThe xmlrpc module is a pure JavaScript XML-RPC server and client for node.js.\n\nPure JavaScript means that the [XML parsing](https://github.com/isaacs/sax-js)\nand [XML building](https://github.com/robrighter/node-xml) use pure JavaScript\nlibraries, so no extra C dependencies or build requirements. The xmlrpc module\ncan be used as an XML-RPC server, receiving method calls and responding with\nmethod responses, or as an XML-RPC client, making method calls and receiving\nmethod responses, or as both.\n\n\n## The How\n\n### To Install\n\n```bash\nnpm install xmlrpc\n```\n\n### To Use\n\nThe file client_server.js in the example directory has a nicely commented\nexample of using xmlrpc as an XML-RPC server and client (they even talk to each\nother!).\n\nA brief example:\n\n```javascript\nvar xmlrpc = require('xmlrpc')\n\n// Creates an XML-RPC server to listen to XML-RPC method calls\nvar server = xmlrpc.createServer({ host: 'localhost', port: 9090 })\n// Handle methods not found\nserver.on('NotFound', function(method, params) {\n  console.log('Method ' + method + ' does not exist');\n})\n// Handle method calls by listening for events with the method call name\nserver.on('anAction', function (err, params, callback) {\n  console.log('Method call params for \\'anAction\\': ' + params)\n\n  // ...perform an action...\n\n  // Send a method response with a value\n  callback(null, 'aResult')\n})\nconsole.log('XML-RPC server listening on port 9091')\n\n// Waits briefly to give the XML-RPC server time to start up and start\n// listening\nsetTimeout(function () {\n  // Creates an XML-RPC client. Passes the host information on where to\n  // make the XML-RPC calls.\n  var client = xmlrpc.createClient({ host: 'localhost', port: 9090, path: '/'})\n\n  // Sends a method call to the XML-RPC server\n  client.methodCall('anAction', ['aParam'], function (error, value) {\n    // Results of the method response\n    console.log('Method response for \\'anAction\\': ' + value)\n  })\n\n}, 1000)\n```\n\nOutput from the example:\n\n```\nXML-RPC server listening on port 9090\nMethod call params for 'anAction': aParam\nMethod response for 'anAction': aResult\n```\n\n### Cookies support\n\nIt is possible to turn on cookies support for XML-RPC client by special options flag.\nIf turned on then all the cookies received from server will be bounced back with subsequent calls to the server.\nYou also may manipulate cookies manually by the setCookie/getCookie call.\n\n```javascript\nvar client = xmlrpc.createClient({host: 'localhost', port: 9090, cookies: true});\nclient.setCookie('login', 'bilbo');\n//This call will send provided cookie to the server\nclient.methodCall('someAction', [], function(error, value) {\n    //Here we may get cookie received from server if we know its name\n    console.log(client.getCookie('session'));\n});\n\n```\n\n### To Test\n\n[![Build\nStatus](https://secure.travis-ci.org/baalexander/node-xmlrpc.png)](http://travis-ci.org/baalexander/node-xmlrpc)\n\nXML-RPC must be precise so there are an extensive set of test cases in the test\ndirectory. [Vows](http://vowsjs.org/) is the testing framework and [Travis\nCI](http://travis-ci.org/baalexander/node-xmlrpc) is used for Continuous\nIntegration.\n\nTo run the test suite:\n\n`make test`\n\nIf submitting a bug fix, please update the appropriate test file too.\n\n\n## The License (MIT)\n\nReleased under the MIT license. See the LICENSE file for the complete wording.\n\n\n## Contributors\n\nThank you to all [the\nauthors](https://github.com/baalexander/node-xmlrpc/graphs/contributors) and\neveryone who has filed an issue to help make xmlrpc better.\n\n",
  "readmeFilename": "README.md",
  "_id": "xmlrpc@1.2.0",
  "_from": "xmlrpc@~1.2.0"
}
